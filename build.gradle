plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id("org.cadixdev.licenser") version "0.5.0"
}

group 'net.fabricmc'
version '0.2.0'

def ENV = System.getenv()
version = version + "+" + (ENV.BUILD_NUMBER ? ("build." + ENV.BUILD_NUMBER) : "local")

repositories {
    mavenCentral()
    maven {
        name = 'Fabric'
        url = 'https://maven.modmuss50.me/'
    }
}

dependencies {
    implementation 'com.squareup:javapoet:1.13.0'
    implementation 'net.fabricmc:tiny-mappings-parser:0.3.0+build.17'
    runtimeOnly 'com.google.guava:guava:28.2-jre'

    implementation 'org.ow2.asm:asm:9.0'
    implementation 'org.ow2.asm:asm-analysis:9.0'
    implementation 'org.ow2.asm:asm-commons:9.0'
    implementation 'org.ow2.asm:asm-tree:9.0'
    implementation 'org.ow2.asm:asm-util:9.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

java {
    withSourcesJar()
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

test {
    useJUnitPlatform()
}

tasks.withType(Jar) {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'MappingPoet',
                'Implementation-Version': archiveVersion,
                'Main-Class': "net.fabricmc.mappingpoet.Main"
    }
}

license {
    header file("HEADER")
    include '**/*.java'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // select the repositories you want to publish to
    repositories {
        if (project.hasProperty('mavenPass')) {
            maven {
                url = "http://mavenupload.modmuss50.me/"
                credentials {
                    username = "buildslave"
                    password = project.getProperty('mavenPass')
                }
            }
        }
    }
}
