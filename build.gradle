plugins {
    id 'java'
    id 'maven-publish'
    id("org.cadixdev.licenser") version "0.5.0"
}

group 'net.fabricmc'
version '0.1.0'

sourceCompatibility = 1.8

def ENV = System.getenv()
version = version + "+" + (ENV.BUILD_NUMBER ? ("build." + ENV.BUILD_NUMBER) : "local")

repositories {
    mavenCentral()
    maven {
        name = 'Fabric'
        url = 'https://maven.modmuss50.me/'
    }
}

dependencies {
    implementation 'com.squareup:javapoet:1.13.0'
    implementation 'net.fabricmc:tiny-mappings-parser:0.3.0+build.17'
    runtimeOnly 'com.google.guava:guava:28.2-jre'

    implementation 'org.ow2.asm:asm:9.0'
    implementation 'org.ow2.asm:asm-analysis:9.0'
    implementation 'org.ow2.asm:asm-commons:9.0'
    implementation 'org.ow2.asm:asm-tree:9.0'
    implementation 'org.ow2.asm:asm-util:9.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

java {
    withSourcesJar()
}

test {
    useJUnitPlatform()
}

tasks.withType(Jar) {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'MappingPoet',
                'Implementation-Version': archiveVersion,
                'Main-Class': "net.fabricmc.mappingpoet.Main"
    }
}

task testJar(type: Jar) {
    archiveClassifier.set 'test'
    from sourceSets.test.output
}

def testCodeOutputDir = "build/testout"

task poetTestCode(type: JavaExec, dependsOn: testJar) {
    classpath sourceSets.main.runtimeClasspath + sourceSets.test.output
    outputs.dir testCodeOutputDir
    jvmArgs "-Xmx6G", "-XX:+ShowCodeDetailsInExceptionMessages"
    args "src/test/resources/dummy.tiny", testJar.archiveFile.get(), testCodeOutputDir
    main "net.fabricmc.mappingpoet.Main"
}

task poetTestDocGen(type: Javadoc, dependsOn: poetTestCode) {
    destinationDir = file("build/testdoc")
    source = testCodeOutputDir
    classpath = sourceSets.test.runtimeClasspath + sourceSets.test.output
    options {
        memberLevel = JavadocMemberLevel.PRIVATE
        encoding = "UTF-8"
        links(
                "https://docs.oracle.com/en/java/javase/15/docs/api"
        )
    }
}

license {
    header file("HEADER")
    include '**/*.java'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // select the repositories you want to publish to
    repositories {
        if (project.hasProperty('mavenPass')) {
            maven {
                url = "http://mavenupload.modmuss50.me/"
                credentials {
                    username = "buildslave"
                    password = project.getProperty('mavenPass')
                }
            }
        }
    }
}
