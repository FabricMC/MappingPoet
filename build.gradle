plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'com.diffplug.spotless' version '5.8.2'
}

group 'net.fabricmc'
version '0.4.2'

def ENV = System.getenv()
version = version + (ENV.GITHUB_ACTIONS ? "" : "+local")

repositories {
    mavenCentral()
    maven {
        name = 'Fabric'
        url = 'https://maven.modmuss50.me/'
    }
}

dependencies {
    implementation 'net.fabricmc:javapoet:0.1.1'
    implementation 'net.fabricmc:mapping-io:0.4.0'

    implementation 'org.ow2.asm:asm:9.7'
    implementation 'org.ow2.asm:asm-analysis:9.7'
    implementation 'org.ow2.asm:asm-commons:9.7'
    implementation 'org.ow2.asm:asm-tree:9.7'
    implementation 'org.ow2.asm:asm-util:9.7'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile) {
    options.release = 17
    options.encoding = "UTF-8"
}

test {
    useJUnitPlatform()
}

tasks.withType(Jar) {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'MappingPoet',
                'Implementation-Version': archiveVersion,
                'Main-Class': "net.fabricmc.mappingpoet.Main"
    }
}

import com.diffplug.spotless.LineEnding
spotless {
    lineEndings = LineEnding.UNIX
    java {
        licenseHeaderFile(file("HEADER")).yearSeparator(", ")
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // select the repositories you want to publish to
    repositories {
        if (ENV.MAVEN_URL) {
            maven {
                url ENV.MAVEN_URL
                credentials {
                    username ENV.MAVEN_USERNAME
                    password ENV.MAVEN_PASSWORD
                }
            }
        }
    }
}

// A task to ensure that the version being released has not already been released.
task checkVersion {
    doFirst {
        def xml = new URL("https://maven.fabricmc.net/net/fabricmc/mappingpoet/maven-metadata.xml").text
        def metadata = new XmlSlurper().parseText(xml)
        def versions = metadata.versioning.versions.version*.text();
        if (versions.contains(version)) {
            throw new RuntimeException("${version} has already been released!")
        }
    }
}

publish.mustRunAfter checkVersion
